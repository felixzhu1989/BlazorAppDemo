@using BlazorAppCodingDroplets.Models
@inject IJSRuntime JsRuntime
<input type="checkbox" @bind="displayEmail" /><label>Display Email</label>
@if (displayContacts)
{
    @if (Contacts == null)
    {
        @NullContact
    }
    else if (Contacts.Count == 0)
    {
        @EmptyContact
    }
    else
    {
        @foreach (var contact in Contacts)
        {
            <DisplayContact CurrentContact="contact"
                DisplayEmail="displayEmail"
                DeleteCurrentContact="RequestPermission" />
        }
    }
}
<DeleteConfirmation @ref="deleteConfirmation" OnConfirmed="OnDeleteConfirmed"></DeleteConfirmation>
@code {
    private DeleteConfirmation deleteConfirmation;
    [Parameter]
    public RenderFragment NullContact { get; set; }
    [Parameter]
    public RenderFragment EmptyContact { get; set; }
    [Parameter]
    public List<Contact> Contacts { get; set; }
    private bool displayEmail = false;
    private bool displayContacts = true;
    private async Task DeleteContact(Contact contact)
    {
        var confirmResult = await JsRuntime.InvokeAsync<bool>("confirm", $"Do you need to delete {contact.FirstName} {contact.LastName} from contacts list?");
        if (confirmResult) Contacts.Remove(contact);
    }

    public void ShowContacts() => displayContacts = true;
    public void HideContacts() => displayContacts = false;

    private async Task RequestPermission(Contact contact)
    {
        deleteConfirmation.BodyContent = $"Do you need to delete {contact.FirstName} {contact.LastName} from contacts list?";
        deleteConfirmation.ContactToDelete = contact;
        deleteConfirmation.Show();
    }

    private void OnDeleteConfirmed(Contact contact)
    {
        Contacts.Remove(contact);
        deleteConfirmation.Hide();
    }
}
