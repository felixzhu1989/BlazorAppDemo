@page "/login"
@using BlazorAppCodingDroplets.Authentication
@inject IJSRuntime JsRuntime
@inject UserAccountServer UserAccountServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<PageTitle>Login</PageTitle>
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>L O G I N</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>
@code {
    //用来绑定的模型，直接写在这里
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }
    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = UserAccountServer.GetUserByName(model.UserName);
        //未查询到用户或者密码不正确
        if (userAccount == null || userAccount.Password != model.Password)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Invalid User!");
            return;
        }
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        //更新登录状态
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession()
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });
        NavigationManager.NavigateTo("./", true);
    }
}
