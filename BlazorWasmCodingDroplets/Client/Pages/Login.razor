@page "/login"
@using BlazorWasmCodingDroplets.Shared.Authentication
@using BlazorWasmCodingDroplets.Client.Authentication
@using System.Net
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<PageTitle>Login</PageTitle>
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>L O G I N</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="loginRequest.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="loginRequest.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new LoginRequest();
    private async Task Authenticate()
    {
        //调用API
        var loginResponse = await HttpClient.PostAsJsonAsync<LoginRequest>("/api/Account/Login", loginRequest);
        if (loginResponse.IsSuccessStatusCode)
        {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            NavigationManager.NavigateTo("./", true);
        }
        else if (loginResponse.StatusCode==HttpStatusCode.Unauthorized)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Invalid User!");
            return;
        }
    }
}
