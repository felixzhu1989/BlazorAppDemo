@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>Loading Products...</span>
}
else
{
    <ul class="list-unstyled">
        @foreach (var product in ProductService.Products)
        {
        @*my:margin on y axis*@
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title"/>
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h4 class="price">￥@product.Price</h4>
                </div>
            </li>
        }
    </ul>
}
@code {
    protected override void OnInitialized()
    {
        //组件初始化时就订阅事件，而不是调用GetProductsAsync的方法。
        //因为需要它的父组件调用方法
        //订阅ProductsChanged事件，关联StateHasChanged，重新渲染
        ProductService.ProductsChanged+=StateHasChanged;
    }
    public void Dispose()
    {
        ProductService.ProductsChanged-=StateHasChanged;
    }
}
