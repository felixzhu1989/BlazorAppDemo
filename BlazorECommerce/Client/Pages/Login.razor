@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<PageTitle>Login</PageTitle>
<h3>Login</h3>
<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <input id="email" @bind-value="user.Email" class="form-control" />
        <ValidationMessage For="() => user.Email" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <input id="password" type="password" @bind-value="user.Password" class="form-control" />
        <ValidationMessage For="() => user.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>
<div class="mt-2 text-danger">
    <span>@errorMessage</span>
</div>
@code {
    private UserLogin user = new();
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }
    private async Task HandleLogin()
    {
        //Console.WriteLine("Log me in!");
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            //NavigationManager.NavigateTo("");//home page？
            //我们希望登录后跳转到登录前的页面
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
